<!--<div class="" id="clock-container">
  <div class="" id="date">{{date | async | date: 'cd..'}}</div>
  <div [@time]  class="">{{date | async | date: 's'}}</div>
  <div class="" id="hours">{{date | async | date: 'dd/MM/yyyy'}}</div>
 <path [attr.d] = "coord "  />
   <path d="M250,50 a 75 75 0 0 1 0,250 a 75 75 0 0 1 0,-250" />


   <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="0 0 300 300" preserveAspectRatio="none" style="width:300; height:300; top:0; left:0;">
    <circle cx="100" cy="100" r="57" id="green-halo" fill="none" stroke="#00CC33" stroke-width="15" transform="rotate(-90,100,100)" />
    <text id="myTimer" text-anchor="middle" x="100" y="110" style="font-size: 36px;" >0%</text>
</svg>

(function () {
    // math trick 2*pi*57 = 358, must be less than 360 degree 
    var circle = document.getElementById('green-halo');
    var myTimer = document.getElementById('myTimer');
    var interval = 100;
    var angle = 6 * new Date().getSeconds();
    var angle_increment = 0.6;

    window.timer = window.setInterval(function () {
        circle.setAttribute("stroke-dasharray", angle + ", 20000");
        myTimer.innerHTML =new Date().getSeconds() + 'S';

        if (angle >= 360) {
            window.clearInterval(window.timer);
        }
        angle += angle_increment;
    }.bind(this), interval);
})()



<svg [attr.width]="600" [attr.height]="600">  
    <circle cx="100" cy="100" r="61" [attr.stroke-dasharray]="minutes"
        id="green-halo" fill="none" stroke="blue" 
        stroke-width="5" transform="rotate(-90,100,100)" />
    
    <circle cx="100" cy="100" r="65" [attr.stroke-dasharray]="secondes"
        id="green-halo" fill="none" stroke="red" 
        stroke-width="5" transform="rotate(-90,100,100)" />

   
   <text id="myTimer" text-anchor="middle" x="100" y="110" style="font-size: 36px;" >{{date | async | date: 'jms'}}</text>

</svg> 

 interval: number = 100;
  secondes;
  minutes;
  date;
  angleSecondes: number;
  angleMinutes: number;
  angleSHours: number;
  ngOnInit(): void {
    let now = new Date();

    let mil = now.getMilliseconds();
    let sec = now.getSeconds() + mil / 1000;
    let min = now.getMinutes() + sec / 60;
    let hou = now.getHours() + min / 60;
    let h = hou / 24;
    let m = min / 60;
    let s = sec / 60;



    this.angleSecondes = 6 * new Date().getSeconds();
    this.angleMinutes = 6 * new Date().getMinutes();
    this.date = Observable.interval(100).map(() => {
      this.drawSeconde();
      this.drawMinute();
      return new Date()
    });
  }

  drawMinute() {
    let angleIncrement = 0.06;
    this.minutes = this.angleMinutes + ", 20";
    if (this.angleMinutes >= 360)
      this.angleMinutes = 0;
    this.angleMinutes += angleIncrement;
  }

  drawSeconde() {
   
    let angleIncrement = (360 / 60 / 10);
    if (this.angleSecondes >= 360)
      this.angleSecondes = 0;
    this.secondes = this.angleSecondes + ", 20";
    this.angleSecondes += angleIncrement;
  }

</div>-->